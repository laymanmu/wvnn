plugins {
	id 'java'
	id 'org.springframework.boot' version "${springBootVersion}"
	id 'io.spring.dependency-management' version "${springDepsVersion}"
	id 'jacoco'
	id 'org.barfuin.gradle.jacocolog' version "${jacocoLogVersion}"
	id 'com.diffplug.spotless' version "${spotlessVersion}"
}

group = 'com.wvnn'
version = '0.0.1'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	/** json logging: **/
	implementation "ch.qos.logback:logback-classic:${logbackClassicVersion}"
	implementation "net.logstash.logback:logstash-logback-encoder:${logbackEncoderVersion}"
	/** spring boot: **/
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	/** lombok: **/
	compileOnly "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.projectlombok:lombok"
	testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
	testAnnotationProcessor "org.projectlombok:lombok"
	/** linting: **/
	implementation "com.google.googlejavaformat:google-java-format:${googleJavaFormatVersion}"
	/** testing: **/
	testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
	testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
	testImplementation("org.mockito:mockito-core:${mockitoCoreVersion}")
	testImplementation("org.mockito:mockito-inline:${mockitoInlineVersion}")
}

tasks.withType(Test).configureEach {
	useJUnitPlatform()
	testLogging {
		exceptionFormat 'full'
		events 'started', 'skipped', 'passed', 'failed'
		showStandardStreams true
	}
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.0
			}
		}
	}
}

spotless {
	java {
		googleJavaFormat()
	}
}

tasks.register('format') {
	dependsOn(spotlessJavaApply)
}

